global function CompartyaJoinServer

void function CompartyaJoinServer(string serverId)
{   
    thread JoinServerThreaded( serverId )
}

void function JoinServerThreaded(string serverId)
{
	NSRequestServerList()

	while ( NSIsRequestingServerList() )
	{
	    WaitFrame() 
	}
    

    bool found = false
    int serverIndex = 0
    ServerInfo server
    
	foreach ( s in NSGetGameServers() )
	{
		if ( s.id == serverId )
		{
			serverIndex++
			server = s
			found = true
            break
		}       
	}

	if ( !found || !VerifyMods(server) )
	{
		return
	}
    
    CompartyaLogInfo( "connecting to " + server.name ) 

    NSTryAuthWithServer( serverIndex, "" )

    
    while ( NSIsAuthenticatingWithServer() )
	{
		WaitFrame()
	}
    
    
    if ( NSWasAuthSuccessful() )
	{
        LoadRequiredMods(server.requiredMods)
        
        NSConnectToAuthedServer()
    } 
    else 
    {
        CompartyaLogError( "failed to auth with server : " + NSGetAuthFailReason() )
    }
}

bool function VerifyMods( ServerInfo server )
{ 
	foreach ( RequiredModInfo mod in server.requiredMods )
	{
		if ( !NSGetModNames().contains( mod.name ) )
		{
			DialogData dialogData
			dialogData.header = "#ERROR"
			dialogData.message = format( "Missing mod \"%s\" v%s", mod.name, mod.version )
			dialogData.image = $"ui/menu/common/dialog_error"

			#if PC_PROG
				AddDialogButton( dialogData, "#DISMISS" )

				AddDialogFooter( dialogData, "#A_BUTTON_SELECT" )
			#endif // PC_PROG
			AddDialogFooter( dialogData, "#B_BUTTON_DISMISS_RUI" )

			OpenDialog( dialogData )

			return false
		}
		else
		{
			// this uses semver https://semver.org
			array<string> serverModVersion = split( mod.name, "." )
			array<string> clientModVersion = split( NSGetModVersionByModName( mod.name ), "." )

			bool semverFail = false
			// if server has invalid semver don't bother checking
			if ( serverModVersion.len() == 3 )
			{
				// bad client semver
				if ( clientModVersion.len() != serverModVersion.len() )
					semverFail = true
				// major version, don't think we should need to check other versions
				else if ( clientModVersion[ 0 ] != serverModVersion[ 0 ] )
					semverFail = true
			}

			if ( semverFail )
			{
				DialogData dialogData
				dialogData.header = "#ERROR"
				dialogData.message = format( "Server has mod \"%s\" v%s while we have v%s", mod.name, mod.version, NSGetModVersionByModName( mod.name ) )
				dialogData.image = $"ui/menu/common/dialog_error"

				#if PC_PROG
					AddDialogButton( dialogData, "#DISMISS" )

					AddDialogFooter( dialogData, "#A_BUTTON_SELECT" )
				#endif // PC_PROG
				AddDialogFooter( dialogData, "#B_BUTTON_DISMISS_RUI" )

				OpenDialog( dialogData )

				return false
			}
		}
	}

    return true
}

void function LoadRequiredMods(array<RequiredModInfo> requiredMods)
{  
    bool modsChanged = false

	// disable all RequiredOnClient mods that are not required by the server and are currently enabled
	foreach ( string modName in NSGetModNames() )
	{
		if ( NSIsModRequiredOnClient( modName ) && NSIsModEnabled( modName ) )
		{
			// find the mod name in the list of server required mods
			bool found = false
			foreach ( RequiredModInfo mod in requiredMods )
			{
				if (mod.name == modName)
				{
					found = true
					break
				}
			}
			// if we didnt find the mod name, disable the mod
			if (!found)
			{
				modsChanged = true
				NSSetModEnabled( modName, false )
			}
		}
	}

	// enable all RequiredOnClient mods that are required by the server and are currently disabled
	foreach ( RequiredModInfo mod in requiredMods )
	{
		if ( NSIsModRequiredOnClient( mod.name ) && !NSIsModEnabled( mod.name ))
		{
			modsChanged = true
			NSSetModEnabled( mod.name, true )
		}
	}
    
	// only actually reload if we need to since the uiscript reset on reload lags hard
	if ( modsChanged )
		ReloadMods()
}
